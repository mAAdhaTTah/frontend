/**
 * This injects Tailwind's base styles, which is a combination of
 * Normalize.css and some additional base styles.
 *
 * You can see the styles here:
 * https://github.com/tailwindcss/tailwindcss/blob/master/css/preflight.css
 */
@import 'tailwindcss';

/**
 * This injects any component classes registered by plugins.
 */

/**
 * This injects all of Tailwind's utility classes, generated based on your
 * config file.
 */
@config '../tailwind.config.js';

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }
}

@utility basis-100 {
  flex-basis: 100%;
}

@utility pin-y-50 {
  top: 50%;
}

@utility pin-x-50 {
  left: 50%;
}

@utility pin-50 {
  @apply pin-x-50 pin-y-50;
}

@utility pin-y-center {
  @apply pin-y-50;
  transform: translateY(-50%);
}

@utility pin-y-bottom {
  bottom: 0;
  transform: translateY(-50%);
}

@utility pin-x-center {
  @apply pin-x-50;
  transform: translateX(-50%);
}

@utility pin-center {
  @apply pin-50;
  transform: translate(-50%, -50%);
}

@utility avoid-break-inside {
  page-break-inside: avoid;
  break-inside: avoid;
}

@layer utilities {
  /**
 * Here you would add any custom utilities you need that don't come out of the
 * box with Tailwind.
 *
 * Example :
 *
 * .bg-pattern-graph-paper { ... }
 * .skew-45 { ... }
 */
  a {
    color: inherit;
  }

  body {
    @apply bg-primary;
  }
}

.toolbar {
  @apply font-muli font-light;
}

pre.prism-code.line-numbers {
  position: relative;
  counter-reset: linenumber;
}

.token-line {
  display: block;
  counter-increment: linenumber;
  position: relative;
  padding-left: 3em;
}

.token-line::before {
  position: absolute;
  left: 0.4em;
  content: counter(linenumber);
  color: #999;
  display: block;
  border-right: 1px solid #999;
  padding-right: 0.9em;
  width: 2em;
}

/* TODO(mAAdhaTTah) convert to tailwind + use state from function */
@keyframes fade-enter {
  0%,
  50% {
    opacity: 0;
    transform: translateX(100%);
  }

  100% {
    opacity: 1;
    transform: translateX(0%);
  }
}

@keyframes fade-exit {
  from {
    opacity: 1;
    transform: translateX(0%);
  }

  to {
    opacity: 0;
    transform: translateX(100%);
  }
}

::view-transition-old(content) {
  animation: fade-exit ease-out 600ms forwards;
}

::view-transition-new(content) {
  animation: fade-enter ease-out 1200ms;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  word-wrap: normal;
  border: 0;
}
